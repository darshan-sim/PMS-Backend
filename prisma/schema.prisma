// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

enum Role {
  student
  placement_cell
  recruiter
}

enum PlacementStatus {
  not_placed
  placed
  seeking
}

model User {
  userId    String    @id @default(uuid()) @map("user_id")
  username  String    @db.VarChar(100)
  email     String    @unique @db.VarChar(100)
  password  String    @db.VarChar(255)
  role      Role
  isActive  Boolean   @default(true) @map("is_active")
  createdAt DateTime? @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  // Relations
  student       Student?
  recruiter     Recruiter?
  placementCell PlacementCell? @relation("AdminToPlacementCell")

  // placement_cell PlacementCell[] @relation("AdminToPlacementCell")
  @@map("users")
}

model Student {
  studentId        String  @id @map("student_id")
  enrollmentNumber String  @unique @map("enrollment_number") @db.VarChar(50)
  placementCellId  String? @map("placement_cell_id")
  degreeId         String  @map("degree_id")

  fullName                  String          @map("full_name") @db.VarChar(100)
  cgpa                      Decimal?        @db.Decimal(3, 2)
  bachelorsGpa              Decimal?        @map("bachelors_gpa") @db.Decimal(3, 2)
  tenthPercentage           Decimal?        @map("tenth_percentage") @db.Decimal(5, 2)
  twelfthPercentage         Decimal?        @map("twelfth_percentage") @db.Decimal(5, 2)
  diplomaPercentage         Decimal?        @map("diploma_percentage") @db.Decimal(5, 2)
  backlogs                  Int             @default(0)
  liveBacklogs              Int             @default(0) @map("live_backlogs")
  placementStatus           PlacementStatus @default(not_placed) @map("placement_status")
  resumeUrl                 String?         @map("resume_url")
  isVerifiedByPlacementCell Boolean         @default(false)
  createdAt                 DateTime?       @default(now()) @map("created_at")
  updatedAt                 DateTime?       @updatedAt @map("updated_at")
  deletedAt                 DateTime?       @map("deleted_at")

  // Relations
  user           User           @relation(fields: [studentId], references: [userId])
  placement_cell PlacementCell? @relation(fields: [placementCellId], references: [placementCellId])
  degree         Degree         @relation(fields: [degreeId], references: [degreeId])

  @@unique([enrollmentNumber, placementCellId])
  @@map("students")
}

model PlacementCell {
  placementCellId    String    @id @default(uuid()) @map("placement_cell_id")
  placementCellName  String    @unique @db.VarChar(100)
  // domains         String[] @db.Text // we'll use a helper table for unique check 
  isVerified         Boolean   @default(false) @map("is_verified")
  placementCellEmail String?   @db.VarChar(100)
  website            String?   @db.VarChar(100)
  createdAt          DateTime? @default(now()) @map("created_at")
  updatedAt          DateTime? @updatedAt @map("updated_at")
  deletedAt          DateTime? @map("deleted_at")

  // Foreign Keys
  adminId  String @unique @map("admin_id")
  branchId String @map("branch_id")

  // Relations
  admin                User                  @relation("AdminToPlacementCell", fields: [adminId], references: [userId])
  branch               Branch                @relation(fields: [branchId], references: [branchId])
  students             Student[]
  placementCellDegrees PlacementCellDegree[]
  placementCellDomains PlacementCellDomain[]

  @@map("placement_cells")
}

model PlacementCellDomain {
  id              String @id @default(uuid())
  placementCellId String @map("placement_cell_id")
  domain          String @db.VarChar(100)

  placementCell PlacementCell @relation(fields: [placementCellId], references: [placementCellId])

  @@unique([domain, placementCellId])
  @@map("placement_cell_domains")
}

model Branch {
  branchId String @id @default(uuid()) @map("branch_id")
  name     String @unique @db.VarChar(100)

  // Relations
  placementCells PlacementCell[]

  @@map("branches")
}

model Degree {
  degreeId String @id @default(uuid()) @map("degree_id")
  name     String @unique @db.VarChar(100)

  // Relations
  placementCellDegrees PlacementCellDegree[]
  Student              Student[]

  @@map("degrees")
}

model PlacementCellDegree {
  id              String @id @default(uuid())
  placementCellId String @map("placement_cell_id")
  degreeId        String @map("degree_id")

  placementCell PlacementCell @relation(fields: [placementCellId], references: [placementCellId])
  degree        Degree        @relation(fields: [degreeId], references: [degreeId])

  @@map("placement_cell_degrees")
}

model Recruiter {
  recruiterId            String    @id @default(uuid()) @map("recruiter_id")
  companyName            String    @unique @map("company_name") @db.VarChar(100)
  representativePosition String    @map("representative_position") @db.VarChar(100)
  description            String?   @db.Text
  website                String?   @db.VarChar(100)
  companyEmail           String?   @db.VarChar(100)
  createdAt              DateTime? @default(now()) @map("created_at")
  updatedAt              DateTime? @updatedAt @map("updated_at")
  deletedAt              DateTime? @map("deleted_at")

  // Foreign Key
  representativeId String @unique @map("representative_id")

  // Relations
  representative User @relation(fields: [representativeId], references: [userId])

  @@map("recruiters")
}
